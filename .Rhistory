source("http://bioconductor.org/biocLite.R")
biocLite("GSVA")
vignette(vignettes/GSVA/inst/doc/GSVA.Rnw)
vignette(package='GSVA')
print(vignette(package='GSVA'))
options(width=60)
pdf.options(useDingbats=FALSE)
###################################################
### code chunk number 2: GSVA.Rnw:163-176
###################################################
library(GSVA)
p <- 20000    ## number of genes
n <- 30       ## number of samples
nGS <- 100    ## number of gene sets
min.sz <- 10  ## minimum gene set size
max.sz <- 100 ## maximum gene set size
X <- matrix(rnorm(p*n), nrow=p, dimnames=list(1:p, 1:n))
dim(X)
gs <- as.list(sample(min.sz:max.sz, size=nGS, replace=TRUE)) ## sample gene set sizes
gs
gs <- lapply(gs, function(n, p) sample(1:p, size=n, replace=FALSE), p) ## sample gene sets
gs
hemp(gsva)
help(gsva)
es.max <- gsva(X, gs, mx.diff=FALSE, verbose=FALSE, parallel.sz=1)$es.obs
es.max
es.dif <- gsva(X, gs, mx.diff=TRUE, verbose=FALSE, parallel.sz=1)$es.obs
par(mfrow=c(1,2), mar=c(4, 4, 4, 1))
plot(density(as.vector(es.max)), main="Maximum deviation from zero",
xlab="GSVA score", lwd=2, las=1, xaxt="n", xlim=c(-0.75, 0.75), cex.axis=0.8)
axis(1, at=seq(-0.75, 0.75, by=0.25), labels=seq(-0.75, 0.75, by=0.25), cex.axis=0.8)
plot(density(as.vector(es.dif)), main="Difference between largest\npositive and negative deviations",
xlab="GSVA score", lwd=2, las=1, xaxt="n", xlim=c(-0.75, 0.75), cex.axis=0.8)
axis(1, at=seq(-0.75, 0.75, by=0.25), labels=seq(-0.75, 0.75, by=0.25), cex.axis=0.8)
es.dif
library(GSEABase)
library(GSVAdata)
data(c2BroadSets)
library(GSVAData)
install.packages("GSVAdata")
library(Biobase)
library(genefilter)
library(limma)
library(RColorBrewer)
library(GSVA)
install.packages("genefilter")
library(GSVAData)
library(GSVAdata)
data(c2BroadSets)
install.packages("GSVAdata")
source("http://bioconductor.org/biocLite.R")
biocLite("GSVAdata")
library(GSVAdata)
data(c2BroadSets)
c2BroadSets
library(Biobase)
library(genefilter)
source("http://bioconductor.org/biocLite.R")
biocLite("genefilter")
library(genefilter)
install.packages("splines")
library(limma)
source("http://bioconductor.org/biocLite.R")
biocLite("limma")
library(RColorBrewer)
install.packages("~/Downloads/RColorBrewer_1.0-5-2.tar", repos = NULL)
install.packages("~/Downloads/RColorBrewer_1.0-5.tar", repos = NULL)
library(GSVA)
library("splines", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
install.packages(splines)
cacheDir <- system.file("extdata", package="GSVA")
cachePrefix <- "cache4vignette_"
###################################################
### code chunk number 7: GSVA.Rnw:336-337 (eval = FALSE)
###################################################
## file.remove(paste(cacheDir, list.files(cacheDir, pattern=cachePrefix), sep="/"))
###################################################
### code chunk number 8: GSVA.Rnw:359-363
###################################################
data(leukemia)
leukemia_eset
head(pData(leukemia_eset))
table(leukemia_eset$subtype)
###################################################
### code chunk number 9: figIQR
###################################################
png(filename="GSVA-figIQR.png", width=500, height=500, res=150)
IQRs <- esApply(leukemia_eset, 1, IQR)
plot.ecdf(IQRs, pch=".", xlab="Interquartile range (IQR)", main="Leukemia data")
abline(v=quantile(IQRs, prob=0.5), lwd=2, col="red")
dev.off()
leukemia_eset
leukemia
help(esApply)
filtered_eset <- nsFilter(leukemia_eset, require.entrez=TRUE, remove.dupEntrez=TRUE,
var.func=IQR, var.filter=TRUE, var.cutoff=0.5, filterByQuantile=TRUE,
feature.exclude="^AFFX")
help(ns.filter)
set.seed(31);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
dataFrameSubset<-dataFrame[heightsCM>188]
dataFrame
dataFrameSubset<-dataFrame[,heightsCM>188]
dataFrameSubset<-dataFrame[,dataFrame$heightsCM>188]
dataFrameSubset<-dataFrame[,dataFrame$heightsCM>188]
class(dataFrame$heightsCM)
dataFrame[,dataFrame$heightsCM>188]
subset(dataFrame, heightsCM>188)
dataFrameSubset<-subset(dataFrame, heightsCM>188)
mean(dataFrameSubset$weightsK)
?rcauch
set.seed(41)
cauchyValues<-rcauchy(100)
set.seed(415)
sample(cauchyValues, 10)
?rcauchy
set.seed(41)
?runif
help(runif)
cauchyValues<-rcauchy(100)
set.seed(415)
sample(cauchyValues, 10,replacement=TRUE)
?sample
sample(cauchyValues, 10,replace=TRUE)
?sync
?sinc
load(file.choose())
ls()
plot(x,y)
lm(y ~ x)
summary(lm(y ~ x))
summary(lm(y ~ x + I(x^2)))
7.771e+01
install.packages('tree')
install.packages('gbm')
load(url("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/ESL.mixture.rda"))
load(file.choose())
ls()
getwd()
load('Users/nicolavoyle/Downloads/ESL.mixture.rda')
load(Users/nicolavoyle/Downloads/ESL.mixture.rda)
load('/Users/nicolavoyle/Downloads/ESL.mixture.rda')
?mvrnorm
library(MASS)
?mvrnorm
x1 <- mvrnorm(50,0,diag(10))
x1 <- mvrnorm(50, rep(0,10), diag(10))
x1
c(rep(0,5), rep(1,5))
y2 <- rep(1,50)
x2 <- mvrnorm(50, c(rep(1,5), rep(0,5)), diag(10))
y_train <- bind(y1, y2)
dim(y)
y_train <- cbind(y1, y2)
y1 <- rep(0,50)
y_train <- cbind(y1, y2)
y_train
y_train <- rbind(y1, y2)
y_train
y_train <- c(y1, y2)
y_train
x1
x_train <- rbind(x1, x2)
x_train
y_train <- as.factor(c(y1, y2))
x_train <- as.data.frame(rbind(x1, x2))
y_train
x_train
library(e1071)
mod <- svm(y_train ~ x_train)
data_train <- cbind(y_train, x_train)
data_train
class(data_train)
mod <- svm(y_train ~ ., data = data_train)
mod
generate <- function(){
y1 <- rep(0,50)
x1 <- mvrnorm(50, rep(0,10), diag(10))
y2 <- rep(1,50)
x2 <- mvrnorm(50, c(rep(1,5), rep(0,5)), diag(10))
y <- as.factor(c(y1, y2))
x <- as.data.frame(rbind(x1, x2))
data <- cbind(y_train, x_train)
}
data1 <- generate()
data1
train <- generate()
test <- generate()
mod <- svm(y_train ~ ., data = train)
pred <- predict(mod, test[,2:11])
pred
library(caret)
?confusionMatrix
confusionMatrix(pred, test[,1])
mat <- confusionMatrix(pred, test[,1])
names(mat)
mat$positive
mat$table
mat$overall
1 - mat$overall$Accuracy
1 - mat$overall[1]
error <- rep(NA,1000)
erro
error
error <- rep(NA,1000)
for (i in 1:1000) {
train <- generate()
test <- generate()
mod <- svm(y_train ~ ., data = train)
pred <- predict(mod, test[,2:11])
mat <- confusionMatrix(pred, test[,1])
error[i] <- 1 - mat$overall[1]
}
error
generate <- function(){
y1 <- rep(0,50)
x1 <- mvrnorm(50, rep(0,10), diag(10))
y2 <- rep(1,50)
x2 <- mvrnorm(50, c(rep(1,5), rep(0,5)), diag(10))
y <- as.factor(c(y1, y2))
x <- as.data.frame(rbind(x1, x2))
data_train <- cbind(y, x)
y1 <- rep(0,1000)
x1 <- mvrnorm(1000, rep(0,10), diag(10))
y2 <- rep(1,1000)
x2 <- mvrnorm(1000, c(rep(1,5), rep(0,5)), diag(10))
y <- as.factor(c(y1, y2))
x <- as.data.frame(rbind(x1, x2))
data_test <- cbind(y, x)
list(data_train, data_test)
}
train <- generate()[[1]]
test <- generate()[[2]]
dim(train)
class(train)
dim(test)
class(test)
colnames(train)
error <- rep(NA,1000)
for (i in 1:1000) {
train <- generate()[[1]]
test <- generate()[[2]]
mod <- svm(y ~ ., data = train)
pred <- predict(mod, test[,2:11])
mat <- confusionMatrix(pred, test[,1])
error[i] <- 1 - mat$overall[1]
}
error
mean(error)
error <- rep(NA,1000)
for (i in 1:1000) {
train <- generate()[[1]]
test <- generate()[[2]]
mod <- svm(y ~ ., data = train, kernel='linear')
pred <- predict(mod, test[,2:11])
mat <- confusionMatrix(pred, test[,1])
error[i] <- 1 - mat$overall[1]
}
mean(error)
mod <- glm(y ~ ., data = train, family=binomial())
mod
pred <- predict(mod, test[,2:11])
pred
?predict
mat <- confusionMatrix(pred, test[,1], type='response')
pred <- predict(mod, test[,2:11], type='response')
pred
pre <- as.numeric(pred > 0.5)
pred <- as.numeric(pred > 0.5)
pred
mat <- confusionMatrix(pred, test[,1])
mat
error <- rep(NA,1000)
for (i in 1:1000) {
train <- generate()[[1]]
test <- generate()[[2]]
mod <- glm(y ~ ., data = train, family=binomial())
pred <- predict(mod, test[,2:11], type='response')
pred <- as.numeric(pred > 0.5)
mat <- confusionMatrix(pred, test[,1])
error[i] <- 1 - mat$overall[1]
}
mean(error)
library(bayesm)
data(bank)
class(bank)
bank
length(bank)
names(bank)
dim(bank[[1]])
head(bank[[1]])
class(bank[[1]])
choiceAtt=bank$choiceAtt
Z=bank$demo
summary(choiceAtt$id)
summary(choiceAtt$choice)
summary(as.factor(choiceAtt$choice))
dim(Z)
head(Z)
Based on the example given at : http://onlinelibrary.wiley.com/store/10.1002/0470863692.app1/asset/app1.pdf;jsessionid=BEDC5B9F19E88589FE15924D046C7444.f03t03?v=1&t=i77t24ge&s=123e983a4aec00f3e663ce2b408a282d4607c59e
source('~/.active-rstudio-document', echo=TRUE)
load(file.choose())
list()
dim(x)
dim(x.test)
xx <- rbind(x, x.test)
dim(xx)
pc <- prcomp(xx)
pc
summary(pc)
pc <- prcomp(xx, scale=T)
summary(pc)
names(pc)
pc$rotation
names(pc)
pc$center
pc$x
names(pc)
class(pc)
dim(prcomp$sdev)
dim(prcomp$rotation)
dim(pc$rotation)
dim(pc$sdev)
dim(pc$center)
dim(pc$scale)
dim(pc$x)
x.pc <- pc$x[1:300,1:5]
x.test.pc <- pc$x[300:1300,1:5]
mod <- lm(y ~ x.pc)
mod
?predict
pred <- predict(mod, x.test.pc)
class(x.test.pc)
pred <- predict(mod, as.data.frame(x.test.pc))
head(x.pc)
head(y)
head(x.test.pc)
head(y.test)
head(as.data.frame(x.test.pc))
class(x.pc)
x.pc <- as.data.frame(x.pc)
head(x.pc)
x.test.pc <- as.data.frame(x.test.pc)
dim(x.test)
dim(x.test.pc)
dim(x.pc)
x.test.pc <- pc$x[301:1300,1:5]
x.test.pc <- as.data.frame(x.test.pc)
head(x.test.pc)
mod <- lm(y ~ x.pc)
train <- cbind(y, x.pc)
head(train)
test <- cbind(y.test, x.test.pc)
head(test)
colnames(test)[1] <- 'y'
head(test)
dim(train)
dim(test)
mod <- lm(y ~ ., data = train)
pred <- predict(mod, test[,2:6])
pred
?postResample
library(caret)
?postResample
postResample(pred, test[,1])
0.9961315^2
train <- cbind(y,x)
test <- cbind(t.test, x.test)
test <- cbind(y.test, x.test)
mod <- lm(y ~ ., data=train)
pred <- predict(mod, test[,-1])
postResample(pred, test[,1])
1.912380030^2
library(shiny)
getwd()
setwd('/Users/nicolavoyle/Documents/Bayesian_Modeling/Example shiny code')
getwd()
runApp('bayes-app')
library(shiny)
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
library(DT)
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
runApp('bayes-app')
